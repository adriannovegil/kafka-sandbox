version: '3.9'
services:

  # Zookeeper nodes
  # ============================================================================
  zk-1:
    image: 'confluentinc/cp-zookeeper:${CONFLUENT_VERSION}'
    hostname: zk-1
    restart: unless-stopped
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 13181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: 'zk-1:13888:14888;zk-2:23888:24888;zk-3:33888:34888'
    ports:
      - '13181:13181'
    networks:
      - devsandbox
      - observabilitysandbox

  zk-2:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    hostname: zk-2
    restart: unless-stopped
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 23181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zk-1:13888:14888;zk-2:23888:24888;zk-3:33888:34888
    ports:
      - 23181:23181
    networks:
      - devsandbox
      - observabilitysandbox

  zk-3:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    hostname: zk-3
    restart: unless-stopped
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 33181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zk-1:13888:14888;zk-2:23888:24888;zk-3:33888:34888
    ports:
      - 33181:33181
    networks:
      - devsandbox
      - observabilitysandbox

  # Kafka nodes
  # ============================================================================
  kafka-1:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    hostname: kafka-1
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zk-1:13181,zk-2:13181,zk-3:13181
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      CONFLUENT_METRICS_ENABLE: 'false'
    ports:
      - 9092:9092
      - 29092:29092
      - 9991:9991
    depends_on:
      - zk-1
      - zk-2
      - zk-3
    networks:
      - devsandbox
      - observabilitysandbox

  kafka-2:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    hostname: kafka-2
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_JMX_PORT: 9992
      KAFKA_ZOOKEEPER_CONNECT: zk-1:13181,zk-2:13181,zk-3:13181
      KAFKA_LISTENERS: INTERNAL://:30092,EXTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:30092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      CONFLUENT_METRICS_ENABLE: 'false'
    ports:
      - 9093:9093
      - 30092:30092
      - 9992:9992
    depends_on:
      - zk-1
      - zk-2
      - zk-3
    networks:
      - devsandbox
      - observabilitysandbox

  kafka-3:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    hostname: kafka-3
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_JMX_PORT: 9993
      KAFKA_ZOOKEEPER_CONNECT: zk-1:13181,zk-2:13181,zk-3:13181
      KAFKA_LISTENERS: INTERNAL://:40092,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:40092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      CONFLUENT_METRICS_ENABLE: 'false'
    ports:
      - 9094:9094
      - 40092:40092
      - 9993:9993
    depends_on:
      - zk-1
      - zk-2
      - zk-3
    networks:
      - devsandbox
      - observabilitysandbox

  # Schema registry
  # ===========================================================================
  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    restart: always
    hostname: schema-registry
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-1:20092,kafka-2:30092,kafka-3:40092"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      # Uses incorrect container utility belt (CUB) environment variables due to bug.
      # See https://github.com/confluentinc/cp-docker-images/issues/807. A fix was merged that
      # will be available in the CP 5.4 image.
      KAFKA_REST_CUB_KAFKA_TIMEOUT: 120
      KAFKA_REST_CUB_KAFKA_MIN_BROKERS: 3
    ports:
      - "8081:8081"
    networks:
      - devsandbox
      - observabilitysandbox

  # Kafka Connect
  # ===========================================================================
  connect:
    image: confluentinc/cp-kafka-connect:${CONFLUENT_VERSION}
    restart: always
    hostname: connect
    container_name: connect
    environment:
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
      CONNECT_GROUP_ID: "connect"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-statuses"
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      CONNECT_PLUGIN_PATH: /usr/share/java
      CONNECT_REST_HOST_NAME: "connect"
      CONNECT_REST_PORT: 8083
      CONNECT_CUB_KAFKA_TIMEOUT: 120
    volumes:
      - ./data:/data
    ports:
      - "8083:8083"
    networks:
      - devsandbox
      - observabilitysandbox

  # ksqldb server
  # ===========================================================================
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_VERSION}
    restart: always
    hostname: ksqldb-server
    container_name: ksqldb-server
    environment:
      # KSQL_CONFIG_DIR: "/etc/ksql"
      # KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
      KSQL_HOST_NAME: ksqldb-server
      KSQL_APPLICATION_ID: "etl-demo"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      # Set the buffer cache to 0 so that the KSQL CLI shows all updates to KTables for learning purposes.
      # The default is 10 MB, which means records in a KTable are compacted before showing output.
      # Change cache.max.bytes.buffering and commit.interval.ms to tune this behavior.
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
    ports:
      - "8088:8088"
    networks:
      - devsandbox
      - observabilitysandbox

  # Create kafka topic
  # ===========================================================================
  create-topic:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    container_name: create-topic
    volumes:
      - ./config/kafka/client.properties:/client/client.properties
    command: kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9092,kafka-3:9092 --command-config /client/client.properties --create --topic perf --replication-factor 3 --partitions 3
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - devsandbox
      - observabilitysandbox

  #control-center:
  #  image: confluentinc/cp-enterprise-control-center:${CONFLUENT_VERSION}
  #  restart: always
  #  hostname: control-center
  #  container_name: control-center
  #  environment:
  #    CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
  #    CONTROL_CENTER_ZOOKEEPER_CONNECT: zk-1:13181,zk-2:13181,zk-3:13181
  #    CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 4
  #    CONTROL_CENTER_REPLICATION_FACTOR: 3
  #    CONTROL_CENTER_CONNECT_CLUSTER: "connect:8083"
  #    CONTROL_CENTER_KSQL_URL: "http://ksqldb-server:8088"
  #    CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://ksqldb-server:8088"
  #    CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #    CONTROL_CENTER_UI_AUTOUPDATE_ENABLE: "false"
  #  ports:
  #    - "9021:9021"
  #  networks:
  #    - devsandbox
  #    - observabilitysandbox

  # Observability
  # ===========================================================================
  jmx-exporter-kafka-1:
    image: "sscaling/jmx-prometheus-exporter"
    environment:
      CONFIG_YML : "/etc/jmx_exporter/config.yml"
      JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
    ports:
      - 5556:5556
    volumes:
      - ./jmx_exporter/config_kafka101.yml:/etc/jmx_exporter/config.yml
    depends_on:
      - kafka-1
    networks:
      - devsandbox
      - observabilitysandbox

  jmx-exporter-kafka-2:
    image: "sscaling/jmx-prometheus-exporter"
    environment:
      CONFIG_YML : "/etc/jmx_exporter/config.yml"
      JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
    ports:
      - 5557:5556
    volumes:
      - ./jmx_exporter/config_kafka102.yml:/etc/jmx_exporter/config.yml
    depends_on:
      - kafka-2
    networks:
      - devsandbox
      - observabilitysandbox

  jmx-exporter-kafka-3:
    image: "sscaling/jmx-prometheus-exporter"
    environment:
      CONFIG_YML : "/etc/jmx_exporter/config.yml"
      JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
    ports:
      - 5558:5556
    volumes:
      - ./jmx_exporter/config_kafka103.yml:/etc/jmx_exporter/config.yml
    depends_on:
      - kafka-3
    networks:
        - devsandbox
        - observabilitysandbox

  # UI
  # ===========================================================================
  kafka-kowl:
    image: docker.redpanda.com/vectorized/console:master-0a8fce8
    environment:
      KAFKA_BROKERS: kafka-1:20092,kafka-2:30092,kafka-3:40092
    ports:
      - 9088:8080
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - devsandbox
      - observabilitysandbox

networks:
  devsandbox:
    name: devsandbox
    external: true
  observabilitysandbox:
    name: observabilitysandbox
    external: true
